#%RAML 0.8
---
title: API Resource
baseUri: https://localhost/api/
protocols: [HTTPS]
mediaType: application/json

traits:
  - auth: !include _traits/auth.raml

/users:
  description: User resource.
  get:
    is: [auth: { roles: 'staff' }]
    description: Retrive the list of the users.
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+6624582",
                  "roles": [
                    "citizen"
                  ]
                },
                {
                  "id": "54d8ae163fd30364605c81a9",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+8211332",
                  "roles": [
                    "citizen",
                    "staff"
                  ]
                },
                ...
              ]
  post:
    description: Create a new user2.
    body:
      application/json:
        example: |
          {
            "firstname": "Romain",
            "lastname": "Terieur",
            "phone": "+6624582",
            "roles": [
              "citizen"
            ]
          }
    responses:
      201:
        body:
          application/json:
            example: |
              {
                "id": "54d8ae163fd30364605c81a4",
                "firstname": "Romain",
                "lastname": "Terieur",
                "phone": "+6624582",
                "roles": [
                  "citizen"
                ]
              }

  /{id}:
    get:
      is: [auth: {roles: 'any'} ]
      description: Retrieve the details of a specific user.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+6624582",
                  "roles": [
                    "citizen"
                  ]
                }
    put:
      is: [auth: {roles: 'staff'} ]
      description: Update the details of a specific user.
      body:
        application/json:
          example: |
            {
              "firstname": "Romain",
              "lastname": "Terieur",
              "phone": "+6624582",
              "roles": [
                "citizen"
              ]
            }
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+6624582",
                  "roles": [
                    "citizen"
                  ]
                }
    delete:
      is: [auth: {roles: 'staff'} ]
      description: Delete a specific user.
      responses:
        204:
          body:

/issues:
  description: Issue that have been reported.
  get:
    is: [auth: {roles: 'any'} ]
    description: liste tous les problèmes
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "author": "Romain Terreur (user)",
                "IssueType": "131 (issueType)",
                "description": "Lampadaire tombé par terre",
                "GéoCordonnées":"",
                "status": "ouvert",
                "roles": [
                  "citizen" ]
              }

  post:
    is: [auth: {roles: 'any'} ]
    description: créer un problème
    body:
      application/json:
        example: |
          {
            "author": "Romain Terreur (user)",
            "IssueType": "131 (issueType)",
            "description": "Lampadaire tombé par terre",
            "GéoCordonnées":"",
            "status": "ouvert",
            "roles": [
              "citizen"]
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {

              }

  /{id}:

    get:
      is: [auth: {roles: 'any'} ]
      description: affiche un problème selon id
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "author": "Romain Terreur (user)",
                  "IssueType": "131 (issueType)",
                  "description": "Lampadaire tombé par terre",
                  "GéoCordonnées":"",
                  "status": "ouvert",
                  "roles": [
                    "citizen"]
                }

    put:
      is: [auth: {roles: 'staff, user'} ]
      description: modifie un problème
      body:
        application/json:
          example: |
            {
              "author": "Romain Terreur (user)",
              "IssueType": "131 (issueType)",
              "description": "Lampadaire tombé par terre",
              "GéoCordonnées":"",
              "status": "ouvert",
              "roles": [
                "citizen"]
            }
      responses:
        200:
          body:
            application/json:
              example: |
                {

                }
    delete:
      is: [auth: {roles: 'staff, user'} ]
      description: suppresion d'un problème
      responses:
        200:
          body:
            application/json:
              example: |
                {
                }

    /action:

      get:
        is: [auth: {roles: 'any'} ]
        description: affiche toutes les actions pour une issue
        responses:
          200:
            body:
              application/json:
                example: |
                  {

                  }
      post:
        is: [auth: {roles: 'staff'} ]
        description: ajout d'une action pour une issue
        body:
          application/json:
            example: |
              {

              }
        responses:
          200:
            body:
              application/json:
                example: |
                  {

                  }
/issueTypes:
  description: List of the type of issues.
  get:
    is: [auth: {roles: 'any'} ]
    description: renvoye tous les types de problèmes
    responses:
      200:
        body:
          application/json:
            example: |
              {

              }
  post:
    is: [auth: {roles: 'staff'} ]
    description: permet de créer un nouveau type de problème
    body:
      application/json:
        example: |
          {

          }
    responses:
      200:
        body:
          application/json:
            example: |
              {

              }
  put:
    is: [auth: {roles: 'staff'} ]
    description: permet de créer un nouveau type de problème
    body:
      application/json:
        example: |
          {

          }
    responses:
      200:
        body:
          application/json:
            example: |
              {

              }
  /{id}:


    get:
      is: [auth: {roles: 'any'} ]
      description: récupère un type de problème selon id
      responses:
        200:
          body:
            application/json:
              example: |
                {

                }
    delete:
      is: [auth: {roles: 'staff'} ]
      description: supprime un type de problème selon id
      responses:
        200:
          body:
            application/json:
              example: |
                {
                }
/actions:
  description: Actions that have been done to resolve issues
  get:
    is: [auth: {roles: 'staff'} ]
    description: renvoie l'entier des actions
    responses:
      200:
        body:
          application/json:
            example: |
              {

              }
  put:
    is: [auth: {roles: 'staff'} ]
    description: permet de modififier une action
    body:
      application/json:
        example: |
          {

          }
    responses:
      200:
        body:
          application/json:
            example: |
              {

              }

/data:

  /populate:
    post:
      is: [auth: {roles: 'any'}]
      description: Allow to populate random data to have a starting situation.
      responses:
        200:
          body:
